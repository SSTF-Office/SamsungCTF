class Cipher:
    def foo(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int,
                  I: int, J: int, K: int, L: int, M: int, N: int, O: int, P: int, S: list[int]):
        for i in range(8):
            S1 = S[i * 4]
            S2 = S[i * 4 + 1]
            S3 = S[i * 4 + 2]
            S4 = S[i * 4 + 3]

            B, C, D, A = self.boo(A, B, C, D, S1, S2)
            F, G, H, E = self.boo(E, F, G, H, S2, S3)
            J, K, L, I = self.boo(I, J, K, L, S3, S4)
            N, O, P, M = self.boo(M, N, O, P, S4, S1)

        return A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P

    def boo(self, a0: int, b0: int, c0: int, d0: int, e0: int, f0: int):
        a0 = self.abc(self.corge(self.fred(a0, b0), b0), e0)
        b0 = self.abc(self.corge(self.fred(a0, b0), a0), f0)

        c0 = self.abc(self.corge(self.fred(c0, d0), d0), e0)
        d0 = self.abc(self.corge(self.fred(c0, d0), c0), f0)

        return a0, b0, c0, d0

    def qux(self, x1: int, y1: int):
        return divmod(x1, y1)

    def fred(self, x2: int, y2: int):
        return x2 ^ y2

    def ork(self, x3: int, y3: int):
        return x3 | y3

    def thud(self, x4: int, y4: int):
        return x4 << y4

    def plugh(self, x5: int, y5: int):
        return x5 >> y5

    def corge(self, x6: int, y6: int):
        y6 = self.mod(y6, 8)
        return self.ork(self.thud(x6, y6), self.plugh(x6, 8 - y6))

    def abc(self, x7: int, y7: int):
        return self.mod(x7 + y7, 256)

    def mod(self, x: int, y: int):
        return self.qux(x, y)[1]


class Decipher(Cipher):
    def decrypt(self, A: int, B: int, C: int, D: int, E: int, F: int, G: int, H: int,
                      I: int, J: int, K: int, L: int, M: int, N: int, O: int, P: int, S: list[int]):
        for i in range(8)[::-1]:
            S1 = S[i * 4]
            S2 = S[i * 4 + 1]
            S3 = S[i * 4 + 2]
            S4 = S[i * 4 + 3]

            M, N, O, P = self.dec(P, M, N, O, S4, S1)
            I, J, K, L = self.dec(L, I, J, K, S3, S4)
            E, F, G, H = self.dec(H, E, F, G, S2, S3)
            A, B, C, D = self.dec(D, A, B, C, S1, S2)

        return A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P

    def dec(self, A: int, B: int, C: int, D: int, S1: int, S2: int):
        D = self.fred(self.rotr(self.sub(D, S2), C), C)
        C = self.fred(self.rotr(self.sub(C, S1), D), D)

        B = self.fred(self.rotr(self.sub(B, S2), A), A)
        A = self.fred(self.rotr(self.sub(A, S1), B), B)

        return A, B, C, D

    def sub(self, x: int, y: int):
        return self.mod(x - y, 256)

    def rotr(self, x: int, y: int):
        y = self.mod(y, 8)
        return self.ork(self.plugh(x, y), self.thud(x & self.sub(self.thud(1, y), 1), self.sub(8, y)))


if __name__ == '__main__':
    # constants from 'foo'
    S = [
        36, 23, 181, 177, 69, 193, 10, 99, 246, 149, 183, 75, 181, 94, 185, 250,
        179, 79, 77, 56, 107, 54, 201, 203, 243, 64, 48, 121, 173, 95, 231, 47
    ]

    cipher = Decipher()

    # constants from 'bar'
    x = cipher.decrypt(36, 200, 122, 255, 146, 2, 160, 94, 80, 115, 51, 102, 105, 102, 167, 137, S=S)

    # constants from 'baz'
    magic = [
        42, 18, 99, 47, 178, 170, 203, 13, 122, 145, 20, 65, 16, 55, 180, 143,
        73, 51, 91, 88, 167, 164, 212, 73, 124, 190, 17, 112, 89, 57, 216, 203,
        38, 102, 95, 90, 150, 151, 138, 70, 104, 145, 96, 88, 93, 61, 141, 196
    ]

    flag = [m ^ x[i % 16] for i, m in enumerate(magic)]
    print(''.join(map(chr, flag)))
