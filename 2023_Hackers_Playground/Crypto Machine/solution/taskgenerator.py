#!/usr/bin/python3
import random
import time

# =================== Task Generator =================

# 1. set some p, q
#976	96	2505.4282314777374	n=247986593396209875084012131452934099056733647935670515473445992426598899768930823740730826984242067958254605065641483735657759815550540477139432139634638820800423008986789544454729772610227969667760774290284773564029419009020038717859540703507091627999301056310286835600515951248243765130446092120746666876180555284845580231826491442541887612771483752883992273123591778121336015719453085571539280921597192879792417258434207273636582639024556173720065931114200134382018852051071187029307957847828986113074903235247989408426632701126391774984490145343174906256844624326505324922216905289293	d_p_as_digits=[0, 13, 5, 1, 1, 11, 11, 3, 6, 15, 13, 11, 8, 15, 10, 8, 2, 7, 2, 4, 11, 1, 15, 1, 15, 5, 10, 11, 3, 2, 13, 7, 2, 15, 1, 6, 12, 9, 11, 11, 15, 10, 4, 11, 8, 4, 11, 13, 7, 3, 15, 0, 10, 3, 3, 13, 14, 0, 5, 14, 0, 4, 5, 10, 1, 7, 9, 12, 4, 14, 12, 11, 6, 10, 9, 10, 10, 15, 13, 0, 7, 5, 8, 4, 2, 4, 2, 4, 9, 13, 12, 2, 8, 7, 0, 9, 7, 15, 9, 12, 12, 11, 3, 13, 13, 5, 6, 0, 8, 1, 1, 13, 11, 10, 15, 3, 13, 6, 7, 3, 7, 0, 8, 11, 5, 15, 1, 12, 7, 13, 2, 6, 9, 15, 3, 14, 1, 5, 6, 1, 8, 6, 5, 15, 13, 9, 13, 1, 4, 7, 9, 7, 5, 6, 8, 14, 15, 2, 1, 15, 0, 14, 9, 7, 9, 1, 12, 6, 10, 1, 5, 8, 14, 3, 15, 13, 13, 15, 5, 6, 9, 0, 0, 3, 1, 6, 10, 6, 2, 4, 1, 4, 11, 7, 8, 3, 6, 9, 1, 15, 4, 14, 12, 15, 15, 10, 6, 6, 2, 1, 14, 15, 12, 1, 6, 9, 11, 7, 5, 11, 2, 2, 7, 8, 6, 5, 13, 10, 13, 15, 8, 3, 5, 11, 14, 14, 1, 2, 15, 2, 13, 5, 6, 15]	d_q_as_digits=[13, 10, 13, 0, 0, 3, 6, 2, 6, 4, 15, 9, 15, 2, 10, 12, 15, 3, 4, 2, 2, 10, 10, 11, 3, 11, 9, 7, 14, 12, 5, 10, 6, 11, 8, 2, 2, 8, 3, 11, 0, 4, 6, 0, 0, 1, 11, 4, 9, 2, 8, 14, 12, 14, 15, 14, 12, 8, 9, 9, 9, 6, 5, 1, 2, 12, 10, 6, 7, 2, 6, 12, 13, 13, 2, 12, 15, 15, 8, 12, 0, 15, 14, 4, 14, 8, 6, 15, 13, 12, 5, 2, 12, 10, 12, 10, 9, 7, 10, 4, 3, 0, 0, 6, 0, 7, 10, 6, 7, 5, 5, 15, 8, 12, 11, 14, 0, 2, 11, 5, 7, 4, 10, 3, 8, 5, 5, 14, 3, 12, 1, 6, 6, 8, 0, 0, 1, 9, 8, 14, 15, 12, 10, 8, 3, 2, 14, 5, 6, 1, 3, 8, 5, 13, 3, 1, 14, 6, 9, 1, 11, 0, 7, 12, 12, 11, 14, 0, 14, 15, 9, 6, 10, 7, 9, 10, 5, 12, 12, 3, 10, 11, 7, 9, 13, 10, 1, 11, 11, 4, 13, 10, 13, 14, 13, 6, 1, 3, 6, 12, 3, 5, 5, 2, 2, 7, 12, 11, 2, 3, 9, 8, 14, 0, 5, 7, 12, 10, 14, 8, 3, 10, 2, 6, 4, 12, 9, 7, 2, 4, 4, 15, 0, 4, 11, 14, 5, 7, 4, 0, 4, 9, 11, 13]	p_bits	q_bits	d_bits=??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????0???????????0???????????1???????????0???????????0???????????0???????????0???????????0???????????0???????????0???????????1???????????1???????????1???????????1???????????0???????????0???????????1???????????0???????????0??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????0???????????1???????????1???????????1???????????0???????????0???????????0???????????1???????????0???????????1???????????0???????????1???????????0???????????1???????????1???????????0???????????1???????????0???????????0???????????0??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????0???????????1???????????1???????????0???????????0???????????0???????????0???????????0???????????1???????????1???????????1???????????1???????????0???????????0???????????0???????????1???????????0???????????1???????????0???????????1??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????0???????????1???????????0???????????1???????????1???????????1???????????1???????????0???????????1???????????1???????????1???????????0???????????0???????????0???????????0???????????1???????????1???????????1???????????1???????????1	dp_bits	dq_bits
p = 416541034800239426909078476055123175923564047768259484693692313196139456310171868707227883635042072959384245229842532429577638953813839513026730918119761909347776227488132457250280183660547663106250344943925849717528581867409258843604429327212901840551271394231670333348803084043064968687381523
q = 595347331182237061347692817052681611773957447581678972755021305396135991672166078878425800756900446693751359592663038457826236214317841578620119321597623505354261297234533414377268097416007957411658784462114462457802873838204636148813681556004050482640036934572347409577272590176272426287400991
#p=64267558241908666417733361879418922846912714781344201030182476192608005183082218959606297527425504593243577419541398376746183186391731271302601677691919313334580348920523377132156317689727747304791847872962387761803238899006897090887939535592311729659469570966936920230201
#q=57092127296275807673540220199547831903572635689476015143413074154688033190104951891005916669330744003760293022138271463528409376460448342213206231554743308244956092147311772448078036058607225398933920936325943682762207271267143414186154480505814763131389544634818007643387

# 2. set how much bits shall be anonymized in p, q, d, d_p and d_q
# - 100% means no bits are known except obvious ones (e.g. p, q are odd -> p[0]=q[0]=1)
# - it is not recommended to anonymize less than 80% of bits because such keys is breakable in <1sec no matter of its length
percentToAnonymize = 96 # 100 means we assume 

# 3. set the flag
flag = "SCTF{1232-32452-4564-2432}"

# 4. if you wish to have the same outputs each time, seed random number generator by a constant
random.seed(time.time())
# random.seed(0) # will generate the same outputs each time

# 5. set the amount of bits in single digit of Fixed Window Exponentiation that leaks data in this CTF challenge (typically omega = 4 or 5 as in OpenSSL)
omega = 4

# 6. run

# Rabin-Miller test to test is integer number prime or not
# https://www.literateprograms.org/miller-rabin_primality_test__python_.html
def miller_rabin_pass(a, s, d, n):
    a_to_power = pow(a, d, n)
    if a_to_power == 1:
        return True
    for i in range(s-1):
        if a_to_power == n - 1:
            return True
        a_to_power = (a_to_power * a_to_power) % n
    return a_to_power == n - 1

def miller_rabin_test(n):

    # compute s and d
    d = n - 1
    s = 0
    while d % 2 == 0:
        d >>= 1
        s += 1

    # make probability to be composite less than 1/4^20
    for repeat in range(20):
        a = 0
        while a == 0:
            a = random.randrange(n)
        if not miller_rabin_pass(a, s, d, n):
            return False
    return True

# generate random prime number of bitlen bits long
def randprime(bitlen: int):

    while True:
        result = random.randint(2**(bitlen-1), 2**bitlen-1)
        if miller_rabin_test(result):
            return result

def gcdExtended(a, b):
    global x, y

    # Base Case
    if (a == 0):
        x = 0
        y = 1
        return b

    # To store results of recursive call
    gcd = gcdExtended(b % a, a)
    x1 = x
    y1 = y

    # Update x and y using results of recursive
    # call
    x = y1 - (b // a) * x1
    y = x1
 
    return gcd
 
def modInverse(A, M):
 
    g = gcdExtended(A, M)
    if (g != 1):
        print("Inverse doesn't exist")
    else:
        # m is added to handle negative x
        res = (x % M + M) % M
        return res

# anonymize some part of a number, extend the number up to exponent bits long
def anonymize(n: int, percentToAnonymize: int, exponent: int): 
  
    fmt: str = "{0:0" + "{}".format(exponent.bit_length()) + "b}"
    nStr: str = fmt.format(n)
    digitsCountToAnonymize: int = len(nStr) * percentToAnonymize // 100

    # nothing to anonymize
    if digitsCountToAnonymize == 0:
        return nStr
    
    # all bits are unknown
    if digitsCountToAnonymize == len(nStr):
        return "?" * len(nStr)

    # select any co-prime number bigger than len(nStr)
    coprime = randprime(len(nStr).bit_length() + 1)

    # there will be no duplications and no bit 0 for sure because digitsCountToAnonymize < len(nStr)
    for i in range (digitsCountToAnonymize):

        # this is bit position to anonymize
        pos = ((i + 1) * coprime) % len(nStr)
        nStr = nStr[:pos] + "?" + nStr[pos+1:]

    return nStr

# generate modulus n
n = p * q
print("n = {}".format(n))

# generate private key d
phi_n = (p-1) * (q-1)
e = 2 ** 16 + 1
d = modInverse(e, phi_n)
d_p = d % (p-1)
d_q = d % (q-1)
assert d * e % phi_n == 1

mask = 2 ** omega - 1
d_p_as_digits = []
d_q_as_digits = []
permutate_d_p = list(range(2 ** omega))
permutate_d_q = list(range(2 ** omega))
random.shuffle(permutate_d_p)
random.shuffle(permutate_d_q)
digits_count = (p.bit_length() + omega - 1) // omega # this is because d_p = d mod (p-1) and p is odd
for i in range(digits_count):
    d_p_as_digits.append(permutate_d_p[(((d_p) >> (i*omega)) & mask)])
    d_q_as_digits.append(permutate_d_q[(((d_q) >> (i*omega)) & mask)])

d_p_as_digits=[0, 13, 5, 1, 1, 11, 11, 3, 6, 15, 13, 11, 8, 15, 10, 8, 2, 7, 2, 4, 11, 1, 15, 1, 15, 5, 10, 11, 3, 2, 13, 7, 2, 15, 1, 6, 12, 9, 11, 11, 15, 10, 4, 11, 8, 4, 11, 13, 7, 3, 15, 0, 10, 3, 3, 13, 14, 0, 5, 14, 0, 4, 5, 10, 1, 7, 9, 12, 4, 14, 12, 11, 6, 10, 9, 10, 10, 15, 13, 0, 7, 5, 8, 4, 2, 4, 2, 4, 9, 13, 12, 2, 8, 7, 0, 9, 7, 15, 9, 12, 12, 11, 3, 13, 13, 5, 6, 0, 8, 1, 1, 13, 11, 10, 15, 3, 13, 6, 7, 3, 7, 0, 8, 11, 5, 15, 1, 12, 7, 13, 2, 6, 9, 15, 3, 14, 1, 5, 6, 1, 8, 6, 5, 15, 13, 9, 13, 1, 4, 7, 9, 7, 5, 6, 8, 14, 15, 2, 1, 15, 0, 14, 9, 7, 9, 1, 12, 6, 10, 1, 5, 8, 14, 3, 15, 13, 13, 15, 5, 6, 9, 0, 0, 3, 1, 6, 10, 6, 2, 4, 1, 4, 11, 7, 8, 3, 6, 9, 1, 15, 4, 14, 12, 15, 15, 10, 6, 6, 2, 1, 14, 15, 12, 1, 6, 9, 11, 7, 5, 11, 2, 2, 7, 8, 6, 5, 13, 10, 13, 15, 8, 3, 5, 11, 14, 14, 1, 2, 15, 2, 13, 5, 6, 15]
d_q_as_digits=[13, 10, 13, 0, 0, 3, 6, 2, 6, 4, 15, 9, 15, 2, 10, 12, 15, 3, 4, 2, 2, 10, 10, 11, 3, 11, 9, 7, 14, 12, 5, 10, 6, 11, 8, 2, 2, 8, 3, 11, 0, 4, 6, 0, 0, 1, 11, 4, 9, 2, 8, 14, 12, 14, 15, 14, 12, 8, 9, 9, 9, 6, 5, 1, 2, 12, 10, 6, 7, 2, 6, 12, 13, 13, 2, 12, 15, 15, 8, 12, 0, 15, 14, 4, 14, 8, 6, 15, 13, 12, 5, 2, 12, 10, 12, 10, 9, 7, 10, 4, 3, 0, 0, 6, 0, 7, 10, 6, 7, 5, 5, 15, 8, 12, 11, 14, 0, 2, 11, 5, 7, 4, 10, 3, 8, 5, 5, 14, 3, 12, 1, 6, 6, 8, 0, 0, 1, 9, 8, 14, 15, 12, 10, 8, 3, 2, 14, 5, 6, 1, 3, 8, 5, 13, 3, 1, 14, 6, 9, 1, 11, 0, 7, 12, 12, 11, 14, 0, 14, 15, 9, 6, 10, 7, 9, 10, 5, 12, 12, 3, 10, 11, 7, 9, 13, 10, 1, 11, 11, 4, 13, 10, 13, 14, 13, 6, 1, 3, 6, 12, 3, 5, 5, 2, 2, 7, 12, 11, 2, 3, 9, 8, 14, 0, 5, 7, 12, 10, 14, 8, 3, 10, 2, 6, 4, 12, 9, 7, 2, 4, 4, 15, 0, 4, 11, 14, 5, 7, 4, 0, 4, 9, 11, 13]

print("d_p digit classes:", d_p_as_digits)
print("d_q digit classes:", d_q_as_digits)

p_bits  = anonymize(p, percentToAnonymize, p)
q_bits  = anonymize(q, percentToAnonymize, q)
d_bits  = anonymize(d, percentToAnonymize, n)
dp_bits = anonymize(d_p, percentToAnonymize, p)
dq_bits = anonymize(d_q, percentToAnonymize, q)
#p_bits = "1" + "?" * (n.bit_length() // 2 - 1)
#q_bits = "1" + "?" * (n.bit_length() // 2 - 1)
#d_bits = "1" + "?" * (n.bit_length() - 1) # this is more tricky: assume first bit is 1 (or 0), this is just guess
#dp_bits = "?" * (n.bit_length() // 2)
#dq_bits = "?" * (n.bit_length() // 2)
p_bits
q_bits
d_bits
dp_bits
dq_bits
print("p = ", p_bits)
print("q = ", q_bits)
print("d = ", d_bits)
print("d_p = ", dp_bits)
print("d_q = ", dq_bits)

# In https://blog.cryptohack.org/cryptoctf2021-hard#dorsa there is another way to encode string to int:
#   FLAG = int(FLAG.encode("utf-8").hex(), 16)
# So re-consider this place if necessary.
def string_to_int(s):
    return int.from_bytes(s.encode(encoding="ascii"), byteorder='little')

def int_to_string(i):
    length = (i.bit_length() + 7) // 8
    return i.to_bytes(length, byteorder='little').decode(encoding="ascii")

# encrypt the flag
plaintext = string_to_int(flag)
ciphertext = pow(plaintext, e, n)
print("Encrypted flag:", ciphertext)
# Encrypted flag: 177129900098164650076589011504391075811086423419977967606914848435112726606098737150826634915352464642192232884519042692623505731575994363269686138853952510677405288491033115634952948310810143413513508864381363611430533312844622749345258281688667450467633020659907924385069609243665633521672431245632861734145110593448074748186119761291908566033820189816188259187332736628739311371673574550902905079349212578406593083287457936892325721196081483534816430083194005240681179188447407886022980784096825718895964482945747991215373107390442648810562906878391726541182857899829367860273973905540

# just in case check that it can be decrypted
plaintext_ = pow(ciphertext, d, n)
flag_ = int_to_string(plaintext_)
assert flag == flag_
