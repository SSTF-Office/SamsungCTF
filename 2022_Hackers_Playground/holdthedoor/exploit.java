
import soot.*;
import soot.jimple.*;
import soot.options.Options;

import java.util.*;

public class Main3 {

    private static void initializeSoot(String path) {
        G.reset();

        Options.v().set_no_bodies_for_excluded(true);
        Options.v().set_allow_phantom_refs(true);
        Options.v().set_output_format(Options.output_format_jimple);
        Options.v().set_whole_program(true);
        Options.v().set_process_dir(Collections.singletonList(path));
        Options.v().set_src_prec(Options.src_prec_apk_class_jimple);
        Options.v().set_keep_offset(false);
        Options.v().set_keep_line_number(false);
        Options.v().set_throw_analysis(Options.throw_analysis_dalvik);
        Options.v().set_ignore_resolution_errors(true);

        Main.v().autoSetOptions();
        Options.v().setPhaseOption("cg.spark", "on");

        // Load whatever we need
        Scene.v().loadNecessaryClasses();
//        PackManager.v().runPacks();
        PackManager.v().getPack("wjpp").apply();
    }

    public static void main(String[] args) {
        String methodSig = "<SCTF.C1843: void getCode(java.lang.StringBuilder)>";

        initializeSoot("sctf.jar");

        result = new ArrayList<String>();
        try {
            getCode(Scene.v().getMethod(methodSig));
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(result);
        PackManager.v().writeOutput();
    }

    private static ArrayList<String> result;
    private static Stack<SootMethod> stack;

    public static ArrayList<SootClass> getNext(SootMethod sm) throws Exception
    {
        ArrayList<SootClass> locals = new ArrayList<>();
        SootMethod next = null;
        Body body = sm.retrieveActiveBody();

        for (Unit u : body.getUnits()) {
            Stmt s = (Stmt) u;
            if (s.containsInvokeExpr()){
                SootMethod invMethod = s.getInvokeExpr().getMethod();
                if(invMethod.getName().equals("<init>")) {
                    locals.add(invMethod.getDeclaringClass());
                }
            }
        }
        return locals;
    }
    public static String getFS(SootClass cls, String name) throws Exception {
        SootMethod method = cls.getMethodByNameUnsafe(name);
        while (method == null) {
            cls = cls.getSuperclass();
            method = cls.getMethodByNameUnsafe(name);
        }

        Body body = method.retrieveActiveBody();
        for (Unit u : body.getUnits()) {
            Stmt s = (Stmt) u;
            if (s.containsInvokeExpr()){
                InvokeExpr invokeExpr = s.getInvokeExpr();
                if(invokeExpr.getMethod().getName().equals("append")) {
                    // System.out.println(String.format("%s : %s", invokeExpr.getArg(0).toString(), method.getSignature()));
                    return invokeExpr.getArg(0).toString();
                }
            } else if (s instanceof ThrowStmt) {
                throw new Exception();
            }
        }
        return null;
    }
    public static boolean getCode(SootMethod sm) throws Exception {
//        System.out.println(String.format("=============================================================="));
//        System.out.println(String.format("=  %s", sm.getSignature()));
        ArrayList<SootClass> nexts = null;
        ArrayList<String> results = new ArrayList<>();
        ArrayList<String> fs = new ArrayList<>();
        ArrayList<Boolean> isThis = new ArrayList<>();
        Body body = sm.retrieveActiveBody();

        for (Unit u : body.getUnits()) {
            Stmt s = (Stmt)u;

            if(s.containsInvokeExpr() && s.getInvokeExpr() instanceof InstanceInvokeExpr) {
                InstanceInvokeExpr expr = (InstanceInvokeExpr) s.getInvokeExpr();
                SootMethod invokeMethod = expr.getMethod();
                Local base = (Local) expr.getBase();

                if (invokeMethod.getName().equals("getNext")) {
                    nexts = getNext(invokeMethod);
                }
                else if (invokeMethod.getName().startsWith("f")) {
                    fs.add(invokeMethod.getName());
                    if(base.getType().toString().equals("SCTF.Abstract")) {
                        isThis.add(false);
                        Iterator<SootClass> it =  nexts.iterator();
                        while (it.hasNext()) {
                            SootClass cls = it.next();
                            try {
                                getFS(cls, invokeMethod.getName());
                            } catch (Exception e) {
                                it.remove();
                            }
                        }
                        if(nexts.isEmpty())
                            return false;
                    }
                    else {
                        isThis.add(true);
                        SootClass cls = sm.getDeclaringClass();
                        try {
                            getFS(cls, invokeMethod.getName());
                        } catch (Exception e) {
                            return false;
                        }
                    }
                }
                else if (invokeMethod.getName().equals("getCode")) {
                    for(SootClass nextCls : nexts) {
                        if(getCode(nextCls.getMethodByName(invokeMethod.getName()))) {
//                            System.out.println(sm.getDeclaringClass().getName());
                            for(int i = isThis.size() - 1; i >= 0 ; i--) {
                                if(isThis.get(i))
                                    System.out.println(getFS(sm.getDeclaringClass(), fs.get(i)));
                                else
                                    System.out.println(getFS(nextCls, fs.get(i)));
                            }
                            return true;
                        }
                    }
                }
            }
        }
        if(sm.getDeclaringClass().getName().equals("SCTF.Last")) {
//            System.out.println(sm.getDeclaringClass().getName());
            for(int i = isThis.size() - 1; i >= 0 ; i--) {
                if(isThis.get(i))
                    System.out.println(getFS(sm.getDeclaringClass(), fs.get(i)));
                else
                    System.out.println(getFS(nexts.get(0), fs.get(i)));
            }
            return true;
        }

        return false;
    }
}
