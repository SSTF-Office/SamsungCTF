import requests
from bs4 import BeautifulSoup
import re
from numpy import roots
from functools import reduce

URL = "http://localhost:8081/chal"

## Simple differentiating
def func(co, x):
	return reduce(lambda x, y: x+y, [c * (x ** (len(co) - 1 - i)) for i, c in enumerate(co)])

## Solving quartic equation
def getRoots(coeffiencts):
	differential = [a * (5 - o) for o, a in enumerate(coeffiencts[:-1])]
	root = map(int, roots(differential))

	res = []
	for r in root:
		for i in (r, r - 1, r + 1):
			if func(differential, i) == 0:
				res.append(i)
				break
		else:
			raise ValueError("Cannot find the roots %d"%r)

	return res

s = requests.session()
res = s.get(URL)

for now in range(30):
	#print(res.text)

	bs = BeautifulSoup(res.text, 'html.parser')

	chal = bs.find('div', attrs={'class': 'text-center'})

	## Get equation and the range of x
	eq = chal.contents[0].strip()[7:].split(" \\]", 1)[0]
	mn = int(chal.contents[4].strip().split("\\")[1][2:].strip())
	mx = int(chal.contents[4].strip().split("\\")[3][2:].strip())

	## Get coefficients
	eq = eq.replace(" + ", " ").replace(" - ", " -").replace('x', '')
	co = [int(i) for i in re.sub('\^.', '', eq).split()]

	## Get possible y values of x_min, x_max and the x coordinates of each vertex of y.
	root = getRoots(co) + [mn, mx]
	y = [func(co, x) for x in root + [mn, mx] if mn <= x <= mx]

	mn, mx = min(y), max(y)

	## Send answers
	res = s.post(URL, data={"min":str(mn), "max":str(mx)})

## Extract the flag string
print(re.findall("SCTF{[^}]*}", res.text)[0])
