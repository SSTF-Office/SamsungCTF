from pwn import *
import re

N = 6
M = []


def dfs(stack: [[(int, int)]], direction: int = 0):
    while len(stack) != 0:
        p = stack.pop()
        x, y = p[-1]

        if (x, y) not in p[:-1]:
            yield p

            for n in neighbors((x, y), len(p) % 2 == direction):
                stack.append(p + [n])


def neighbors(point: (int, int), direction: int = 0):
    x, y = point
    if direction % 2 == 0:
        for z in range(N):
            if z != y:
                yield x, z
    else:
        for z in range(N):
            if z != x:
                yield z, y


def find(*args):
    for x in range(N):
        for y in range(N):
            if M[y][x] in args:
                yield M[y][x], (x, y)

def check():
    variants = {}

    for x in range(N):
        for y in range(N):
            k = M[y][x]
            if (k & 0xF) == 0xA:
                variants.setdefault(k, []).append((x, y))
                if len(variants) > 1:
                    progress.failure("To many candidates.. Try again")
                    return

    if len(variants) == 0:
        progress.failure("No candidates found.. Try again")
        return

    for v in variants.values():
        for x, y in v:
            for (x2, y2) in neighbors((x, y)):
                if M[y2][x2] == 0x74:
                    yield [(x, y), (x2, y2)]


def to_string(path: [(int, int)], start=(0, 0)):
    s = ""
    px, py = start
    for (x, y) in path[::-1]:
        h = x - px
        v = y - py

        assert h == 0 or v == 0

        if h > 0:
            s += 'd'*h
        if h < 0:
            s += 'a'*(-h)

        if v > 0:
            s += 's'*v
        if v < 0:
            s += 'w'*(-v)

        s += ' '
        px, py = x, y
    return s


def convert(x):
    return list(map(lambda it: int(it.decode("ascii"), 16), re.findall(b"[0-9A-F]{2}", x)))


def read_matrix():
    matrix = []
    for i in range(6):
        conn.recvline()
        matrix.append(convert(conn.recvline()))
        conn.recvline()
    return matrix


if __name__ == '__main__':
    conn = remote('ctf.ssat.site', 31477)
    log.info("Connected")
    conn.recvlines(12) # banner

    conn.recvlines(5)  # help
    conn.sendline()

    conn.recvlines(12) # banner
    conn.recvline()    # buffer

    M = read_matrix()
    log.info("Matrix retrieved")
    conn.recvuntil("$> ")

    progress = log.progress("Breaking")

    g = check()
    for start in g:
        for p in dfs([start]):
            if len(p) == 18 and p[-1][1] == 0:
                progress.success("Found path")
                log.info("→".join((f"〈{x},{y}: {format(M[y][x], '02X'):}〉" for x, y in p[::-1])))
                cmd = to_string(p)
                log.info(cmd)

                for c in cmd:
                    conn.sendline(c)

                    conn.recvlines(12)  # banner
                    conn.recvline()  # buffer
                    conn.recvlines(3 * 6)  # matrix
                    conn.recvuntil("$> ")

                conn.sendline("q")

                conn.sendline("cat flag")
                x = conn.recvline()
                if x.startswith(b"SCTF{"):
                    log.success(f"Flag: {x.decode('ascii')}")
                else:
                    log.failure(f"Not a flag: {x}")
                g.close()
                break

    conn.close()
